#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LanguageLearningApplication")]
	public partial class LanguageLearningApplicationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCheckpoint(Checkpoint instance);
    partial void UpdateCheckpoint(Checkpoint instance);
    partial void DeleteCheckpoint(Checkpoint instance);
    partial void InsertWordsInFlashcard(WordsInFlashcard instance);
    partial void UpdateWordsInFlashcard(WordsInFlashcard instance);
    partial void DeleteWordsInFlashcard(WordsInFlashcard instance);
    partial void InsertCompletedCourse(CompletedCourse instance);
    partial void UpdateCompletedCourse(CompletedCourse instance);
    partial void DeleteCompletedCourse(CompletedCourse instance);
    partial void InsertCompletedQuizze(CompletedQuizze instance);
    partial void UpdateCompletedQuizze(CompletedQuizze instance);
    partial void DeleteCompletedQuizze(CompletedQuizze instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertFeedbackAndSupport(FeedbackAndSupport instance);
    partial void UpdateFeedbackAndSupport(FeedbackAndSupport instance);
    partial void DeleteFeedbackAndSupport(FeedbackAndSupport instance);
    partial void InsertFlashcard(Flashcard instance);
    partial void UpdateFlashcard(Flashcard instance);
    partial void DeleteFlashcard(Flashcard instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertProgress(Progress instance);
    partial void UpdateProgress(Progress instance);
    partial void DeleteProgress(Progress instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuizze(Quizze instance);
    partial void UpdateQuizze(Quizze instance);
    partial void DeleteQuizze(Quizze instance);
    partial void InsertSecurityToken(SecurityToken instance);
    partial void UpdateSecurityToken(SecurityToken instance);
    partial void DeleteSecurityToken(SecurityToken instance);
    partial void InsertStartedCourse(StartedCourse instance);
    partial void UpdateStartedCourse(StartedCourse instance);
    partial void DeleteStartedCourse(StartedCourse instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVocabularyWord(VocabularyWord instance);
    partial void UpdateVocabularyWord(VocabularyWord instance);
    partial void DeleteVocabularyWord(VocabularyWord instance);
    #endregion
		
		public LanguageLearningApplicationDataContext() : 
				base(global::WpfApp2.Properties.Settings.Default.LanguageLearningApplicationConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public LanguageLearningApplicationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LanguageLearningApplicationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LanguageLearningApplicationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LanguageLearningApplicationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Checkpoint> Checkpoints
		{
			get
			{
				return this.GetTable<Checkpoint>();
			}
		}
		
		public System.Data.Linq.Table<WordsInFlashcard> WordsInFlashcards
		{
			get
			{
				return this.GetTable<WordsInFlashcard>();
			}
		}
		
		public System.Data.Linq.Table<CompletedCourse> CompletedCourses
		{
			get
			{
				return this.GetTable<CompletedCourse>();
			}
		}
		
		public System.Data.Linq.Table<CompletedQuizze> CompletedQuizzes
		{
			get
			{
				return this.GetTable<CompletedQuizze>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<FeedbackAndSupport> FeedbackAndSupports
		{
			get
			{
				return this.GetTable<FeedbackAndSupport>();
			}
		}
		
		public System.Data.Linq.Table<Flashcard> Flashcards
		{
			get
			{
				return this.GetTable<Flashcard>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lessons
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<Progress> Progresses
		{
			get
			{
				return this.GetTable<Progress>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Quizze> Quizzes
		{
			get
			{
				return this.GetTable<Quizze>();
			}
		}
		
		public System.Data.Linq.Table<SecurityToken> SecurityTokens
		{
			get
			{
				return this.GetTable<SecurityToken>();
			}
		}
		
		public System.Data.Linq.Table<StartedCourse> StartedCourses
		{
			get
			{
				return this.GetTable<StartedCourse>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<VocabularyWord> VocabularyWords
		{
			get
			{
				return this.GetTable<VocabularyWord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Checkpoints")]
	public partial class Checkpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UID;
		
		private System.Nullable<int> _LID;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnLIDChanging(System.Nullable<int> value);
    partial void OnLIDChanged();
    #endregion
		
		public Checkpoint()
		{
			this._Lesson = default(EntityRef<Lesson>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", DbType="Int")]
		public System.Nullable<int> LID
		{
			get
			{
				return this._LID;
			}
			set
			{
				if ((this._LID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLIDChanging(value);
					this.SendPropertyChanging();
					this._LID = value;
					this.SendPropertyChanged("LID");
					this.OnLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Checkpoint", Storage="_Lesson", ThisKey="LID", OtherKey="LID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Checkpoints.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Checkpoints.Add(this);
						this._LID = value.LID;
					}
					else
					{
						this._LID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Checkpoint", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Checkpoints.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Checkpoints.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WordsInFlashcards")]
	public partial class WordsInFlashcard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _WID;
		
		private System.Nullable<int> _FID;
		
		private EntityRef<Flashcard> _Flashcard;
		
		private EntityRef<VocabularyWord> _VocabularyWord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWIDChanging(System.Nullable<int> value);
    partial void OnWIDChanged();
    partial void OnFIDChanging(System.Nullable<int> value);
    partial void OnFIDChanged();
    #endregion
		
		public WordsInFlashcard()
		{
			this._Flashcard = default(EntityRef<Flashcard>);
			this._VocabularyWord = default(EntityRef<VocabularyWord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WID", DbType="Int")]
		public System.Nullable<int> WID
		{
			get
			{
				return this._WID;
			}
			set
			{
				if ((this._WID != value))
				{
					if (this._VocabularyWord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWIDChanging(value);
					this.SendPropertyChanging();
					this._WID = value;
					this.SendPropertyChanged("WID");
					this.OnWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FID", DbType="Int")]
		public System.Nullable<int> FID
		{
			get
			{
				return this._FID;
			}
			set
			{
				if ((this._FID != value))
				{
					if (this._Flashcard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFIDChanging(value);
					this.SendPropertyChanging();
					this._FID = value;
					this.SendPropertyChanged("FID");
					this.OnFIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flashcard_WordsInFlashcard", Storage="_Flashcard", ThisKey="FID", OtherKey="FID", IsForeignKey=true)]
		public Flashcard Flashcard
		{
			get
			{
				return this._Flashcard.Entity;
			}
			set
			{
				Flashcard previousValue = this._Flashcard.Entity;
				if (((previousValue != value) 
							|| (this._Flashcard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flashcard.Entity = null;
						previousValue.WordsInFlashcards.Remove(this);
					}
					this._Flashcard.Entity = value;
					if ((value != null))
					{
						value.WordsInFlashcards.Add(this);
						this._FID = value.FID;
					}
					else
					{
						this._FID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Flashcard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VocabularyWord_WordsInFlashcard", Storage="_VocabularyWord", ThisKey="WID", OtherKey="WID", IsForeignKey=true)]
		public VocabularyWord VocabularyWord
		{
			get
			{
				return this._VocabularyWord.Entity;
			}
			set
			{
				VocabularyWord previousValue = this._VocabularyWord.Entity;
				if (((previousValue != value) 
							|| (this._VocabularyWord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VocabularyWord.Entity = null;
						previousValue.WordsInFlashcards.Remove(this);
					}
					this._VocabularyWord.Entity = value;
					if ((value != null))
					{
						value.WordsInFlashcards.Add(this);
						this._WID = value.WID;
					}
					else
					{
						this._WID = default(Nullable<int>);
					}
					this.SendPropertyChanged("VocabularyWord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletedCourses")]
	public partial class CompletedCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UID;
		
		private System.Nullable<int> _CID;
		
		private System.Nullable<System.DateTime> _DateCompleted;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Course> _Course1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnCIDChanging(System.Nullable<int> value);
    partial void OnCIDChanged();
    partial void OnDateCompletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCompletedChanged();
    #endregion
		
		public CompletedCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Course1 = default(EntityRef<Course>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int")]
		public System.Nullable<int> CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if ((this._Course.HasLoadedOrAssignedValue || this._Course1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCompleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCompleted
		{
			get
			{
				return this._DateCompleted;
			}
			set
			{
				if ((this._DateCompleted != value))
				{
					this.OnDateCompletedChanging(value);
					this.SendPropertyChanging();
					this._DateCompleted = value;
					this.SendPropertyChanged("DateCompleted");
					this.OnDateCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CompletedCourse", Storage="_Course", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CompletedCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CompletedCourses.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CompletedCourse1", Storage="_Course1", ThisKey="CID", OtherKey="CID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.CompletedCourses1.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.CompletedCourses1.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedCourse", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CompletedCourses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CompletedCourses.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedCourse1", Storage="_User1", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.CompletedCourses1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.CompletedCourses1.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletedQuizzes")]
	public partial class CompletedQuizze : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _UID;
		
		private System.Nullable<int> _QID;
		
		private EntityRef<Quizze> _Quizze;
		
		private EntityRef<Quizze> _Quizze1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnQIDChanging(System.Nullable<int> value);
    partial void OnQIDChanged();
    #endregion
		
		public CompletedQuizze()
		{
			this._Quizze = default(EntityRef<Quizze>);
			this._Quizze1 = default(EntityRef<Quizze>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QID", DbType="Int")]
		public System.Nullable<int> QID
		{
			get
			{
				return this._QID;
			}
			set
			{
				if ((this._QID != value))
				{
					if ((this._Quizze.HasLoadedOrAssignedValue || this._Quizze1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQIDChanging(value);
					this.SendPropertyChanging();
					this._QID = value;
					this.SendPropertyChanged("QID");
					this.OnQIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_CompletedQuizze", Storage="_Quizze", ThisKey="QID", OtherKey="QID", IsForeignKey=true)]
		public Quizze Quizze
		{
			get
			{
				return this._Quizze.Entity;
			}
			set
			{
				Quizze previousValue = this._Quizze.Entity;
				if (((previousValue != value) 
							|| (this._Quizze.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quizze.Entity = null;
						previousValue.CompletedQuizzes.Remove(this);
					}
					this._Quizze.Entity = value;
					if ((value != null))
					{
						value.CompletedQuizzes.Add(this);
						this._QID = value.QID;
					}
					else
					{
						this._QID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quizze");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_CompletedQuizze1", Storage="_Quizze1", ThisKey="QID", OtherKey="QID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Quizze Quizze1
		{
			get
			{
				return this._Quizze1.Entity;
			}
			set
			{
				Quizze previousValue = this._Quizze1.Entity;
				if (((previousValue != value) 
							|| (this._Quizze1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quizze1.Entity = null;
						previousValue.CompletedQuizzes1.Remove(this);
					}
					this._Quizze1.Entity = value;
					if ((value != null))
					{
						value.CompletedQuizzes1.Add(this);
						this._QID = value.QID;
					}
					else
					{
						this._QID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quizze1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedQuizze", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CompletedQuizzes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CompletedQuizzes.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedQuizze1", Storage="_User1", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.CompletedQuizzes1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.CompletedQuizzes1.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private string _Name;
		
		private string _Language;
		
		private string _Description;
		
		private string _DifficultyLevel;
		
		private System.Nullable<int> _Price;
		
		private System.Nullable<int> _CreatedBy;
		
		private EntitySet<CompletedCourse> _CompletedCourses;
		
		private EntitySet<CompletedCourse> _CompletedCourses1;
		
		private EntitySet<Lesson> _Lessons;
		
		private EntitySet<Lesson> _Lessons1;
		
		private EntitySet<StartedCourse> _StartedCourses;
		
		private EntitySet<StartedCourse> _StartedCourses1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDifficultyLevelChanging(string value);
    partial void OnDifficultyLevelChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Course()
		{
			this._CompletedCourses = new EntitySet<CompletedCourse>(new Action<CompletedCourse>(this.attach_CompletedCourses), new Action<CompletedCourse>(this.detach_CompletedCourses));
			this._CompletedCourses1 = new EntitySet<CompletedCourse>(new Action<CompletedCourse>(this.attach_CompletedCourses1), new Action<CompletedCourse>(this.detach_CompletedCourses1));
			this._Lessons = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons), new Action<Lesson>(this.detach_Lessons));
			this._Lessons1 = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons1), new Action<Lesson>(this.detach_Lessons1));
			this._StartedCourses = new EntitySet<StartedCourse>(new Action<StartedCourse>(this.attach_StartedCourses), new Action<StartedCourse>(this.detach_StartedCourses));
			this._StartedCourses1 = new EntitySet<StartedCourse>(new Action<StartedCourse>(this.attach_StartedCourses1), new Action<StartedCourse>(this.detach_StartedCourses1));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifficultyLevel", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string DifficultyLevel
		{
			get
			{
				return this._DifficultyLevel;
			}
			set
			{
				if ((this._DifficultyLevel != value))
				{
					this.OnDifficultyLevelChanging(value);
					this.SendPropertyChanging();
					this._DifficultyLevel = value;
					this.SendPropertyChanged("DifficultyLevel");
					this.OnDifficultyLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CompletedCourse", Storage="_CompletedCourses", ThisKey="CID", OtherKey="CID")]
		public EntitySet<CompletedCourse> CompletedCourses
		{
			get
			{
				return this._CompletedCourses;
			}
			set
			{
				this._CompletedCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CompletedCourse1", Storage="_CompletedCourses1", ThisKey="CID", OtherKey="CID")]
		public EntitySet<CompletedCourse> CompletedCourses1
		{
			get
			{
				return this._CompletedCourses1;
			}
			set
			{
				this._CompletedCourses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Lesson", Storage="_Lessons", ThisKey="CID", OtherKey="CID")]
		public EntitySet<Lesson> Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Lesson1", Storage="_Lessons1", ThisKey="CID", OtherKey="CID")]
		public EntitySet<Lesson> Lessons1
		{
			get
			{
				return this._Lessons1;
			}
			set
			{
				this._Lessons1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StartedCourse", Storage="_StartedCourses", ThisKey="CID", OtherKey="CID")]
		public EntitySet<StartedCourse> StartedCourses
		{
			get
			{
				return this._StartedCourses;
			}
			set
			{
				this._StartedCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StartedCourse1", Storage="_StartedCourses1", ThisKey="CID", OtherKey="CID")]
		public EntitySet<StartedCourse> StartedCourses1
		{
			get
			{
				return this._StartedCourses1;
			}
			set
			{
				this._StartedCourses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Course", Storage="_User", ThisKey="CreatedBy", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._CreatedBy = value.UID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletedCourses(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CompletedCourses(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CompletedCourses1(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_CompletedCourses1(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Lessons1(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Lessons1(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_StartedCourses(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StartedCourses(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_StartedCourses1(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_StartedCourses1(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedbackAndSupport")]
	public partial class FeedbackAndSupport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UID;
		
		private string _Type;
		
		private string _Description;
		
		private System.DateTime _Date;
		
		private string _Status;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public FeedbackAndSupport()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FeedbackAndSupport", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FeedbackAndSupports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FeedbackAndSupports.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flashcards")]
	public partial class Flashcard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FID;
		
		private System.Nullable<int> _UID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _LastReviewed;
		
		private EntitySet<WordsInFlashcard> _WordsInFlashcards;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIDChanging(int value);
    partial void OnFIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnLastReviewedChanging(System.DateTime value);
    partial void OnLastReviewedChanged();
    #endregion
		
		public Flashcard()
		{
			this._WordsInFlashcards = new EntitySet<WordsInFlashcard>(new Action<WordsInFlashcard>(this.attach_WordsInFlashcards), new Action<WordsInFlashcard>(this.detach_WordsInFlashcards));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FID
		{
			get
			{
				return this._FID;
			}
			set
			{
				if ((this._FID != value))
				{
					this.OnFIDChanging(value);
					this.SendPropertyChanging();
					this._FID = value;
					this.SendPropertyChanged("FID");
					this.OnFIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastReviewed", DbType="DateTime NOT NULL")]
		public System.DateTime LastReviewed
		{
			get
			{
				return this._LastReviewed;
			}
			set
			{
				if ((this._LastReviewed != value))
				{
					this.OnLastReviewedChanging(value);
					this.SendPropertyChanging();
					this._LastReviewed = value;
					this.SendPropertyChanged("LastReviewed");
					this.OnLastReviewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flashcard_WordsInFlashcard", Storage="_WordsInFlashcards", ThisKey="FID", OtherKey="FID")]
		public EntitySet<WordsInFlashcard> WordsInFlashcards
		{
			get
			{
				return this._WordsInFlashcards;
			}
			set
			{
				this._WordsInFlashcards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Flashcard", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Flashcards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Flashcards.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WordsInFlashcards(WordsInFlashcard entity)
		{
			this.SendPropertyChanging();
			entity.Flashcard = this;
		}
		
		private void detach_WordsInFlashcards(WordsInFlashcard entity)
		{
			this.SendPropertyChanging();
			entity.Flashcard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lessons")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LID;
		
		private System.Nullable<int> _CID;
		
		private string _Title;
		
		private int _OrderInCourse;
		
		private string _Content;
		
		private EntitySet<Checkpoint> _Checkpoints;
		
		private EntitySet<Quizze> _Quizzes;
		
		private EntitySet<Quizze> _Quizzes1;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Course> _Course1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIDChanging(int value);
    partial void OnLIDChanged();
    partial void OnCIDChanging(System.Nullable<int> value);
    partial void OnCIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnOrderInCourseChanging(int value);
    partial void OnOrderInCourseChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Lesson()
		{
			this._Checkpoints = new EntitySet<Checkpoint>(new Action<Checkpoint>(this.attach_Checkpoints), new Action<Checkpoint>(this.detach_Checkpoints));
			this._Quizzes = new EntitySet<Quizze>(new Action<Quizze>(this.attach_Quizzes), new Action<Quizze>(this.detach_Quizzes));
			this._Quizzes1 = new EntitySet<Quizze>(new Action<Quizze>(this.attach_Quizzes1), new Action<Quizze>(this.detach_Quizzes1));
			this._Course = default(EntityRef<Course>);
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LID
		{
			get
			{
				return this._LID;
			}
			set
			{
				if ((this._LID != value))
				{
					this.OnLIDChanging(value);
					this.SendPropertyChanging();
					this._LID = value;
					this.SendPropertyChanged("LID");
					this.OnLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int")]
		public System.Nullable<int> CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if ((this._Course.HasLoadedOrAssignedValue || this._Course1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderInCourse", DbType="Int NOT NULL")]
		public int OrderInCourse
		{
			get
			{
				return this._OrderInCourse;
			}
			set
			{
				if ((this._OrderInCourse != value))
				{
					this.OnOrderInCourseChanging(value);
					this.SendPropertyChanging();
					this._OrderInCourse = value;
					this.SendPropertyChanged("OrderInCourse");
					this.OnOrderInCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(1000)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Checkpoint", Storage="_Checkpoints", ThisKey="LID", OtherKey="LID")]
		public EntitySet<Checkpoint> Checkpoints
		{
			get
			{
				return this._Checkpoints;
			}
			set
			{
				this._Checkpoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Quizze", Storage="_Quizzes", ThisKey="LID", OtherKey="LID")]
		public EntitySet<Quizze> Quizzes
		{
			get
			{
				return this._Quizzes;
			}
			set
			{
				this._Quizzes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Quizze1", Storage="_Quizzes1", ThisKey="LID", OtherKey="LID")]
		public EntitySet<Quizze> Quizzes1
		{
			get
			{
				return this._Quizzes1;
			}
			set
			{
				this._Quizzes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Lesson", Storage="_Course", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Lessons.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Lessons.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Lesson1", Storage="_Course1", ThisKey="CID", OtherKey="CID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Lessons1.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Lessons1.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Checkpoints(Checkpoint entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Checkpoints(Checkpoint entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_Quizzes(Quizze entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Quizzes(Quizze entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_Quizzes1(Quizze entity)
		{
			this.SendPropertyChanging();
			entity.Lesson1 = this;
		}
		
		private void detach_Quizzes1(Quizze entity)
		{
			this.SendPropertyChanging();
			entity.Lesson1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Progresses")]
	public partial class Progress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PID;
		
		private System.Nullable<int> _UID;
		
		private int _CompletedLessons;
		
		private int _DailyStreak;
		
		private int _QuizScores;
		
		private int _TimeSpentLearning;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnCompletedLessonsChanging(int value);
    partial void OnCompletedLessonsChanged();
    partial void OnDailyStreakChanging(int value);
    partial void OnDailyStreakChanged();
    partial void OnQuizScoresChanging(int value);
    partial void OnQuizScoresChanged();
    partial void OnTimeSpentLearningChanging(int value);
    partial void OnTimeSpentLearningChanged();
    #endregion
		
		public Progress()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedLessons", DbType="Int NOT NULL")]
		public int CompletedLessons
		{
			get
			{
				return this._CompletedLessons;
			}
			set
			{
				if ((this._CompletedLessons != value))
				{
					this.OnCompletedLessonsChanging(value);
					this.SendPropertyChanging();
					this._CompletedLessons = value;
					this.SendPropertyChanged("CompletedLessons");
					this.OnCompletedLessonsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DailyStreak", DbType="Int NOT NULL")]
		public int DailyStreak
		{
			get
			{
				return this._DailyStreak;
			}
			set
			{
				if ((this._DailyStreak != value))
				{
					this.OnDailyStreakChanging(value);
					this.SendPropertyChanging();
					this._DailyStreak = value;
					this.SendPropertyChanged("DailyStreak");
					this.OnDailyStreakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuizScores", DbType="Int NOT NULL")]
		public int QuizScores
		{
			get
			{
				return this._QuizScores;
			}
			set
			{
				if ((this._QuizScores != value))
				{
					this.OnQuizScoresChanging(value);
					this.SendPropertyChanging();
					this._QuizScores = value;
					this.SendPropertyChanged("QuizScores");
					this.OnQuizScoresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSpentLearning", DbType="Int NOT NULL")]
		public int TimeSpentLearning
		{
			get
			{
				return this._TimeSpentLearning;
			}
			set
			{
				if ((this._TimeSpentLearning != value))
				{
					this.OnTimeSpentLearningChanging(value);
					this.SendPropertyChanging();
					this._TimeSpentLearning = value;
					this.SendPropertyChanged("TimeSpentLearning");
					this.OnTimeSpentLearningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Progress", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Progresses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Progresses.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Progress1", Storage="_User1", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Progresses1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Progresses1.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QUID;
		
		private System.Nullable<int> _QID;
		
		private string _Question1;
		
		private string _FirstAnswer;
		
		private string _SecondAnswer;
		
		private string _ThirdAnswer;
		
		private string _IsCorrect;
		
		private EntityRef<Quizze> _Quizze;
		
		private EntityRef<Quizze> _Quizze1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQUIDChanging(int value);
    partial void OnQUIDChanged();
    partial void OnQIDChanging(System.Nullable<int> value);
    partial void OnQIDChanged();
    partial void OnQuestion1Changing(string value);
    partial void OnQuestion1Changed();
    partial void OnFirstAnswerChanging(string value);
    partial void OnFirstAnswerChanged();
    partial void OnSecondAnswerChanging(string value);
    partial void OnSecondAnswerChanged();
    partial void OnThirdAnswerChanging(string value);
    partial void OnThirdAnswerChanged();
    partial void OnIsCorrectChanging(string value);
    partial void OnIsCorrectChanged();
    #endregion
		
		public Question()
		{
			this._Quizze = default(EntityRef<Quizze>);
			this._Quizze1 = default(EntityRef<Quizze>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QUID
		{
			get
			{
				return this._QUID;
			}
			set
			{
				if ((this._QUID != value))
				{
					this.OnQUIDChanging(value);
					this.SendPropertyChanging();
					this._QUID = value;
					this.SendPropertyChanged("QUID");
					this.OnQUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QID", DbType="Int")]
		public System.Nullable<int> QID
		{
			get
			{
				return this._QID;
			}
			set
			{
				if ((this._QID != value))
				{
					if ((this._Quizze.HasLoadedOrAssignedValue || this._Quizze1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQIDChanging(value);
					this.SendPropertyChanging();
					this._QID = value;
					this.SendPropertyChanged("QID");
					this.OnQIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Question", Storage="_Question1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Question1
		{
			get
			{
				return this._Question1;
			}
			set
			{
				if ((this._Question1 != value))
				{
					this.OnQuestion1Changing(value);
					this.SendPropertyChanging();
					this._Question1 = value;
					this.SendPropertyChanged("Question1");
					this.OnQuestion1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstAnswer", DbType="NVarChar(200)")]
		public string FirstAnswer
		{
			get
			{
				return this._FirstAnswer;
			}
			set
			{
				if ((this._FirstAnswer != value))
				{
					this.OnFirstAnswerChanging(value);
					this.SendPropertyChanging();
					this._FirstAnswer = value;
					this.SendPropertyChanged("FirstAnswer");
					this.OnFirstAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondAnswer", DbType="NVarChar(200)")]
		public string SecondAnswer
		{
			get
			{
				return this._SecondAnswer;
			}
			set
			{
				if ((this._SecondAnswer != value))
				{
					this.OnSecondAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecondAnswer = value;
					this.SendPropertyChanged("SecondAnswer");
					this.OnSecondAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThirdAnswer", DbType="NVarChar(200)")]
		public string ThirdAnswer
		{
			get
			{
				return this._ThirdAnswer;
			}
			set
			{
				if ((this._ThirdAnswer != value))
				{
					this.OnThirdAnswerChanging(value);
					this.SendPropertyChanging();
					this._ThirdAnswer = value;
					this.SendPropertyChanged("ThirdAnswer");
					this.OnThirdAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrect", DbType="NVarChar(50)")]
		public string IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_Question", Storage="_Quizze", ThisKey="QID", OtherKey="QID", IsForeignKey=true)]
		public Quizze Quizze
		{
			get
			{
				return this._Quizze.Entity;
			}
			set
			{
				Quizze previousValue = this._Quizze.Entity;
				if (((previousValue != value) 
							|| (this._Quizze.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quizze.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Quizze.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._QID = value.QID;
					}
					else
					{
						this._QID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quizze");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_Question1", Storage="_Quizze1", ThisKey="QID", OtherKey="QID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Quizze Quizze1
		{
			get
			{
				return this._Quizze1.Entity;
			}
			set
			{
				Quizze previousValue = this._Quizze1.Entity;
				if (((previousValue != value) 
							|| (this._Quizze1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quizze1.Entity = null;
						previousValue.Questions1.Remove(this);
					}
					this._Quizze1.Entity = value;
					if ((value != null))
					{
						value.Questions1.Add(this);
						this._QID = value.QID;
					}
					else
					{
						this._QID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quizze1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quizzes")]
	public partial class Quizze : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QID;
		
		private System.Nullable<int> _LID;
		
		private string _Title;
		
		private string _DifficultyLevel;
		
		private EntitySet<CompletedQuizze> _CompletedQuizzes;
		
		private EntitySet<CompletedQuizze> _CompletedQuizzes1;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<Question> _Questions1;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<Lesson> _Lesson1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQIDChanging(int value);
    partial void OnQIDChanged();
    partial void OnLIDChanging(System.Nullable<int> value);
    partial void OnLIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDifficultyLevelChanging(string value);
    partial void OnDifficultyLevelChanged();
    #endregion
		
		public Quizze()
		{
			this._CompletedQuizzes = new EntitySet<CompletedQuizze>(new Action<CompletedQuizze>(this.attach_CompletedQuizzes), new Action<CompletedQuizze>(this.detach_CompletedQuizzes));
			this._CompletedQuizzes1 = new EntitySet<CompletedQuizze>(new Action<CompletedQuizze>(this.attach_CompletedQuizzes1), new Action<CompletedQuizze>(this.detach_CompletedQuizzes1));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Questions1 = new EntitySet<Question>(new Action<Question>(this.attach_Questions1), new Action<Question>(this.detach_Questions1));
			this._Lesson = default(EntityRef<Lesson>);
			this._Lesson1 = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QID
		{
			get
			{
				return this._QID;
			}
			set
			{
				if ((this._QID != value))
				{
					this.OnQIDChanging(value);
					this.SendPropertyChanging();
					this._QID = value;
					this.SendPropertyChanged("QID");
					this.OnQIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", DbType="Int")]
		public System.Nullable<int> LID
		{
			get
			{
				return this._LID;
			}
			set
			{
				if ((this._LID != value))
				{
					if ((this._Lesson.HasLoadedOrAssignedValue || this._Lesson1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLIDChanging(value);
					this.SendPropertyChanging();
					this._LID = value;
					this.SendPropertyChanged("LID");
					this.OnLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DifficultyLevel", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string DifficultyLevel
		{
			get
			{
				return this._DifficultyLevel;
			}
			set
			{
				if ((this._DifficultyLevel != value))
				{
					this.OnDifficultyLevelChanging(value);
					this.SendPropertyChanging();
					this._DifficultyLevel = value;
					this.SendPropertyChanged("DifficultyLevel");
					this.OnDifficultyLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_CompletedQuizze", Storage="_CompletedQuizzes", ThisKey="QID", OtherKey="QID")]
		public EntitySet<CompletedQuizze> CompletedQuizzes
		{
			get
			{
				return this._CompletedQuizzes;
			}
			set
			{
				this._CompletedQuizzes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_CompletedQuizze1", Storage="_CompletedQuizzes1", ThisKey="QID", OtherKey="QID")]
		public EntitySet<CompletedQuizze> CompletedQuizzes1
		{
			get
			{
				return this._CompletedQuizzes1;
			}
			set
			{
				this._CompletedQuizzes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_Question", Storage="_Questions", ThisKey="QID", OtherKey="QID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quizze_Question1", Storage="_Questions1", ThisKey="QID", OtherKey="QID")]
		public EntitySet<Question> Questions1
		{
			get
			{
				return this._Questions1;
			}
			set
			{
				this._Questions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Quizze", Storage="_Lesson", ThisKey="LID", OtherKey="LID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Quizzes.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Quizzes.Add(this);
						this._LID = value.LID;
					}
					else
					{
						this._LID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Quizze1", Storage="_Lesson1", ThisKey="LID", OtherKey="LID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Lesson Lesson1
		{
			get
			{
				return this._Lesson1.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson1.Entity;
				if (((previousValue != value) 
							|| (this._Lesson1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson1.Entity = null;
						previousValue.Quizzes1.Remove(this);
					}
					this._Lesson1.Entity = value;
					if ((value != null))
					{
						value.Quizzes1.Add(this);
						this._LID = value.LID;
					}
					else
					{
						this._LID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lesson1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompletedQuizzes(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.Quizze = this;
		}
		
		private void detach_CompletedQuizzes(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.Quizze = null;
		}
		
		private void attach_CompletedQuizzes1(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.Quizze1 = this;
		}
		
		private void detach_CompletedQuizzes1(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.Quizze1 = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Quizze = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Quizze = null;
		}
		
		private void attach_Questions1(Question entity)
		{
			this.SendPropertyChanging();
			entity.Quizze1 = this;
		}
		
		private void detach_Questions1(Question entity)
		{
			this.SendPropertyChanging();
			entity.Quizze1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityTokens")]
	public partial class SecurityToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TokenID;
		
		private string _TokenString;
		
		private int _Expired;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTokenIDChanging(int value);
    partial void OnTokenIDChanged();
    partial void OnTokenStringChanging(string value);
    partial void OnTokenStringChanged();
    partial void OnExpiredChanging(int value);
    partial void OnExpiredChanged();
    #endregion
		
		public SecurityToken()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TokenID
		{
			get
			{
				return this._TokenID;
			}
			set
			{
				if ((this._TokenID != value))
				{
					this.OnTokenIDChanging(value);
					this.SendPropertyChanging();
					this._TokenID = value;
					this.SendPropertyChanged("TokenID");
					this.OnTokenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenString", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string TokenString
		{
			get
			{
				return this._TokenString;
			}
			set
			{
				if ((this._TokenString != value))
				{
					this.OnTokenStringChanging(value);
					this.SendPropertyChanging();
					this._TokenString = value;
					this.SendPropertyChanged("TokenString");
					this.OnTokenStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expired", DbType="Int NOT NULL")]
		public int Expired
		{
			get
			{
				return this._Expired;
			}
			set
			{
				if ((this._Expired != value))
				{
					this.OnExpiredChanging(value);
					this.SendPropertyChanging();
					this._Expired = value;
					this.SendPropertyChanged("Expired");
					this.OnExpiredChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StartedCourses")]
	public partial class StartedCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UID;
		
		private System.Nullable<int> _CID;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Course> _Course1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnCIDChanging(System.Nullable<int> value);
    partial void OnCIDChanged();
    #endregion
		
		public StartedCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Course1 = default(EntityRef<Course>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="Int")]
		public System.Nullable<int> CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if ((this._Course.HasLoadedOrAssignedValue || this._Course1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StartedCourse", Storage="_Course", ThisKey="CID", OtherKey="CID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StartedCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StartedCourses.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StartedCourse1", Storage="_Course1", ThisKey="CID", OtherKey="CID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.StartedCourses1.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.StartedCourses1.Add(this);
						this._CID = value.CID;
					}
					else
					{
						this._CID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StartedCourse", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StartedCourses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StartedCourses.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StartedCourse1", Storage="_User1", ThisKey="UID", OtherKey="UID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.StartedCourses1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.StartedCourses1.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _Password;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Data.Linq.Binary _ProfilePicture;
		
		private System.DateTime _RegistrationDate;
		
		private System.DateTime _LastLoginDate;
		
		private string _Role;
		
		private EntitySet<Checkpoint> _Checkpoints;
		
		private EntitySet<CompletedCourse> _CompletedCourses;
		
		private EntitySet<CompletedCourse> _CompletedCourses1;
		
		private EntitySet<CompletedQuizze> _CompletedQuizzes;
		
		private EntitySet<CompletedQuizze> _CompletedQuizzes1;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<FeedbackAndSupport> _FeedbackAndSupports;
		
		private EntitySet<Flashcard> _Flashcards;
		
		private EntitySet<Progress> _Progresses;
		
		private EntitySet<Progress> _Progresses1;
		
		private EntitySet<StartedCourse> _StartedCourses;
		
		private EntitySet<StartedCourse> _StartedCourses1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnProfilePictureChanging(System.Data.Linq.Binary value);
    partial void OnProfilePictureChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public User()
		{
			this._Checkpoints = new EntitySet<Checkpoint>(new Action<Checkpoint>(this.attach_Checkpoints), new Action<Checkpoint>(this.detach_Checkpoints));
			this._CompletedCourses = new EntitySet<CompletedCourse>(new Action<CompletedCourse>(this.attach_CompletedCourses), new Action<CompletedCourse>(this.detach_CompletedCourses));
			this._CompletedCourses1 = new EntitySet<CompletedCourse>(new Action<CompletedCourse>(this.attach_CompletedCourses1), new Action<CompletedCourse>(this.detach_CompletedCourses1));
			this._CompletedQuizzes = new EntitySet<CompletedQuizze>(new Action<CompletedQuizze>(this.attach_CompletedQuizzes), new Action<CompletedQuizze>(this.detach_CompletedQuizzes));
			this._CompletedQuizzes1 = new EntitySet<CompletedQuizze>(new Action<CompletedQuizze>(this.attach_CompletedQuizzes1), new Action<CompletedQuizze>(this.detach_CompletedQuizzes1));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._FeedbackAndSupports = new EntitySet<FeedbackAndSupport>(new Action<FeedbackAndSupport>(this.attach_FeedbackAndSupports), new Action<FeedbackAndSupport>(this.detach_FeedbackAndSupports));
			this._Flashcards = new EntitySet<Flashcard>(new Action<Flashcard>(this.attach_Flashcards), new Action<Flashcard>(this.detach_Flashcards));
			this._Progresses = new EntitySet<Progress>(new Action<Progress>(this.attach_Progresses), new Action<Progress>(this.detach_Progresses));
			this._Progresses1 = new EntitySet<Progress>(new Action<Progress>(this.attach_Progresses1), new Action<Progress>(this.detach_Progresses1));
			this._StartedCourses = new EntitySet<StartedCourse>(new Action<StartedCourse>(this.attach_StartedCourses), new Action<StartedCourse>(this.detach_StartedCourses));
			this._StartedCourses1 = new EntitySet<StartedCourse>(new Action<StartedCourse>(this.attach_StartedCourses1), new Action<StartedCourse>(this.detach_StartedCourses1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePicture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ProfilePicture
		{
			get
			{
				return this._ProfilePicture;
			}
			set
			{
				if ((this._ProfilePicture != value))
				{
					this.OnProfilePictureChanging(value);
					this.SendPropertyChanging();
					this._ProfilePicture = value;
					this.SendPropertyChanged("ProfilePicture");
					this.OnProfilePictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Checkpoint", Storage="_Checkpoints", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Checkpoint> Checkpoints
		{
			get
			{
				return this._Checkpoints;
			}
			set
			{
				this._Checkpoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedCourse", Storage="_CompletedCourses", ThisKey="UID", OtherKey="UID")]
		public EntitySet<CompletedCourse> CompletedCourses
		{
			get
			{
				return this._CompletedCourses;
			}
			set
			{
				this._CompletedCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedCourse1", Storage="_CompletedCourses1", ThisKey="UID", OtherKey="UID")]
		public EntitySet<CompletedCourse> CompletedCourses1
		{
			get
			{
				return this._CompletedCourses1;
			}
			set
			{
				this._CompletedCourses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedQuizze", Storage="_CompletedQuizzes", ThisKey="UID", OtherKey="UID")]
		public EntitySet<CompletedQuizze> CompletedQuizzes
		{
			get
			{
				return this._CompletedQuizzes;
			}
			set
			{
				this._CompletedQuizzes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CompletedQuizze1", Storage="_CompletedQuizzes1", ThisKey="UID", OtherKey="UID")]
		public EntitySet<CompletedQuizze> CompletedQuizzes1
		{
			get
			{
				return this._CompletedQuizzes1;
			}
			set
			{
				this._CompletedQuizzes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Course", Storage="_Courses", ThisKey="UID", OtherKey="CreatedBy")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FeedbackAndSupport", Storage="_FeedbackAndSupports", ThisKey="UID", OtherKey="UID")]
		public EntitySet<FeedbackAndSupport> FeedbackAndSupports
		{
			get
			{
				return this._FeedbackAndSupports;
			}
			set
			{
				this._FeedbackAndSupports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Flashcard", Storage="_Flashcards", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Flashcard> Flashcards
		{
			get
			{
				return this._Flashcards;
			}
			set
			{
				this._Flashcards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Progress", Storage="_Progresses", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Progress> Progresses
		{
			get
			{
				return this._Progresses;
			}
			set
			{
				this._Progresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Progress1", Storage="_Progresses1", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Progress> Progresses1
		{
			get
			{
				return this._Progresses1;
			}
			set
			{
				this._Progresses1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StartedCourse", Storage="_StartedCourses", ThisKey="UID", OtherKey="UID")]
		public EntitySet<StartedCourse> StartedCourses
		{
			get
			{
				return this._StartedCourses;
			}
			set
			{
				this._StartedCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StartedCourse1", Storage="_StartedCourses1", ThisKey="UID", OtherKey="UID")]
		public EntitySet<StartedCourse> StartedCourses1
		{
			get
			{
				return this._StartedCourses1;
			}
			set
			{
				this._StartedCourses1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Checkpoints(Checkpoint entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Checkpoints(Checkpoint entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CompletedCourses(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CompletedCourses(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CompletedCourses1(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_CompletedCourses1(CompletedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_CompletedQuizzes(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CompletedQuizzes(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CompletedQuizzes1(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_CompletedQuizzes1(CompletedQuizze entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FeedbackAndSupports(FeedbackAndSupport entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FeedbackAndSupports(FeedbackAndSupport entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Flashcards(Flashcard entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Flashcards(Flashcard entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Progresses(Progress entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Progresses(Progress entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Progresses1(Progress entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Progresses1(Progress entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_StartedCourses(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StartedCourses(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StartedCourses1(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_StartedCourses1(StartedCourse entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VocabularyWords")]
	public partial class VocabularyWord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WID;
		
		private string _Word;
		
		private string _Language;
		
		private string _TranslationToEnglish;
		
		private string _PartOfSpeech;
		
		private EntitySet<WordsInFlashcard> _WordsInFlashcards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWIDChanging(int value);
    partial void OnWIDChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnTranslationToEnglishChanging(string value);
    partial void OnTranslationToEnglishChanged();
    partial void OnPartOfSpeechChanging(string value);
    partial void OnPartOfSpeechChanged();
    #endregion
		
		public VocabularyWord()
		{
			this._WordsInFlashcards = new EntitySet<WordsInFlashcard>(new Action<WordsInFlashcard>(this.attach_WordsInFlashcards), new Action<WordsInFlashcard>(this.detach_WordsInFlashcards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WID
		{
			get
			{
				return this._WID;
			}
			set
			{
				if ((this._WID != value))
				{
					this.OnWIDChanging(value);
					this.SendPropertyChanging();
					this._WID = value;
					this.SendPropertyChanged("WID");
					this.OnWIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TranslationToEnglish", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TranslationToEnglish
		{
			get
			{
				return this._TranslationToEnglish;
			}
			set
			{
				if ((this._TranslationToEnglish != value))
				{
					this.OnTranslationToEnglishChanging(value);
					this.SendPropertyChanging();
					this._TranslationToEnglish = value;
					this.SendPropertyChanged("TranslationToEnglish");
					this.OnTranslationToEnglishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartOfSpeech", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PartOfSpeech
		{
			get
			{
				return this._PartOfSpeech;
			}
			set
			{
				if ((this._PartOfSpeech != value))
				{
					this.OnPartOfSpeechChanging(value);
					this.SendPropertyChanging();
					this._PartOfSpeech = value;
					this.SendPropertyChanged("PartOfSpeech");
					this.OnPartOfSpeechChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VocabularyWord_WordsInFlashcard", Storage="_WordsInFlashcards", ThisKey="WID", OtherKey="WID")]
		public EntitySet<WordsInFlashcard> WordsInFlashcards
		{
			get
			{
				return this._WordsInFlashcards;
			}
			set
			{
				this._WordsInFlashcards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WordsInFlashcards(WordsInFlashcard entity)
		{
			this.SendPropertyChanging();
			entity.VocabularyWord = this;
		}
		
		private void detach_WordsInFlashcards(WordsInFlashcard entity)
		{
			this.SendPropertyChanging();
			entity.VocabularyWord = null;
		}
	}
}
#pragma warning restore 1591
