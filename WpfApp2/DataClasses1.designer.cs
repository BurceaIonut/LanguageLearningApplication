#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LanguageLearningApp")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdminAccessLog(AdminAccessLog instance);
    partial void UpdateAdminAccessLog(AdminAccessLog instance);
    partial void DeleteAdminAccessLog(AdminAccessLog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserFeedback(UserFeedback instance);
    partial void UpdateUserFeedback(UserFeedback instance);
    partial void DeleteUserFeedback(UserFeedback instance);
    partial void InsertQuizQuestion(QuizQuestion instance);
    partial void UpdateQuizQuestion(QuizQuestion instance);
    partial void DeleteQuizQuestion(QuizQuestion instance);
    partial void InsertQuizAnswer(QuizAnswer instance);
    partial void UpdateQuizAnswer(QuizAnswer instance);
    partial void DeleteQuizAnswer(QuizAnswer instance);
    partial void InsertProgressHistory(ProgressHistory instance);
    partial void UpdateProgressHistory(ProgressHistory instance);
    partial void DeleteProgressHistory(ProgressHistory instance);
    partial void InsertProgress(Progress instance);
    partial void UpdateProgress(Progress instance);
    partial void DeleteProgress(Progress instance);
    partial void InsertLesson(Lesson instance);
    partial void UpdateLesson(Lesson instance);
    partial void DeleteLesson(Lesson instance);
    partial void InsertFavorite(Favorite instance);
    partial void UpdateFavorite(Favorite instance);
    partial void DeleteFavorite(Favorite instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WpfApp2.Properties.Settings.Default.LanguageLearningAppConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdminAccessLog> AdminAccessLogs
		{
			get
			{
				return this.GetTable<AdminAccessLog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserFeedback> UserFeedbacks
		{
			get
			{
				return this.GetTable<UserFeedback>();
			}
		}
		
		public System.Data.Linq.Table<QuizQuestion> QuizQuestions
		{
			get
			{
				return this.GetTable<QuizQuestion>();
			}
		}
		
		public System.Data.Linq.Table<QuizAnswer> QuizAnswers
		{
			get
			{
				return this.GetTable<QuizAnswer>();
			}
		}
		
		public System.Data.Linq.Table<ProgressHistory> ProgressHistories
		{
			get
			{
				return this.GetTable<ProgressHistory>();
			}
		}
		
		public System.Data.Linq.Table<Progress> Progresses
		{
			get
			{
				return this.GetTable<Progress>();
			}
		}
		
		public System.Data.Linq.Table<Lesson> Lessons
		{
			get
			{
				return this.GetTable<Lesson>();
			}
		}
		
		public System.Data.Linq.Table<Favorite> Favorites
		{
			get
			{
				return this.GetTable<Favorite>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminAccessLogs")]
	public partial class AdminAccessLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _AdministratorID;
		
		private System.DateTime _AccessDateTime;
		
		private string _ActionDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnAdministratorIDChanging(int value);
    partial void OnAdministratorIDChanged();
    partial void OnAccessDateTimeChanging(System.DateTime value);
    partial void OnAccessDateTimeChanged();
    partial void OnActionDescriptionChanging(string value);
    partial void OnActionDescriptionChanged();
    #endregion
		
		public AdminAccessLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministratorID", DbType="Int NOT NULL")]
		public int AdministratorID
		{
			get
			{
				return this._AdministratorID;
			}
			set
			{
				if ((this._AdministratorID != value))
				{
					this.OnAdministratorIDChanging(value);
					this.SendPropertyChanging();
					this._AdministratorID = value;
					this.SendPropertyChanged("AdministratorID");
					this.OnAdministratorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime AccessDateTime
		{
			get
			{
				return this._AccessDateTime;
			}
			set
			{
				if ((this._AccessDateTime != value))
				{
					this.OnAccessDateTimeChanging(value);
					this.SendPropertyChanging();
					this._AccessDateTime = value;
					this.SendPropertyChanged("AccessDateTime");
					this.OnAccessDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ActionDescription
		{
			get
			{
				return this._ActionDescription;
			}
			set
			{
				if ((this._ActionDescription != value))
				{
					this.OnActionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ActionDescription = value;
					this.SendPropertyChanged("ActionDescription");
					this.OnActionDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private int _UserType;
		
		private EntitySet<UserFeedback> _UserFeedbacks;
		
		private EntitySet<ProgressHistory> _ProgressHistories;
		
		private EntitySet<Progress> _Progresses;
		
		private EntitySet<Lesson> _Lessons;
		
		private EntitySet<Favorite> _Favorites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserTypeChanging(int value);
    partial void OnUserTypeChanged();
    #endregion
		
		public User()
		{
			this._UserFeedbacks = new EntitySet<UserFeedback>(new Action<UserFeedback>(this.attach_UserFeedbacks), new Action<UserFeedback>(this.detach_UserFeedbacks));
			this._ProgressHistories = new EntitySet<ProgressHistory>(new Action<ProgressHistory>(this.attach_ProgressHistories), new Action<ProgressHistory>(this.detach_ProgressHistories));
			this._Progresses = new EntitySet<Progress>(new Action<Progress>(this.attach_Progresses), new Action<Progress>(this.detach_Progresses));
			this._Lessons = new EntitySet<Lesson>(new Action<Lesson>(this.attach_Lessons), new Action<Lesson>(this.detach_Lessons));
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Int NOT NULL")]
		public int UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserFeedback", Storage="_UserFeedbacks", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserFeedback> UserFeedbacks
		{
			get
			{
				return this._UserFeedbacks;
			}
			set
			{
				this._UserFeedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProgressHistory", Storage="_ProgressHistories", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<ProgressHistory> ProgressHistories
		{
			get
			{
				return this._ProgressHistories;
			}
			set
			{
				this._ProgressHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Progress", Storage="_Progresses", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Progress> Progresses
		{
			get
			{
				return this._Progresses;
			}
			set
			{
				this._Progresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Lesson", Storage="_Lessons", ThisKey="UserID", OtherKey="CreatorUserID")]
		public EntitySet<Lesson> Lessons
		{
			get
			{
				return this._Lessons;
			}
			set
			{
				this._Lessons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favorite", Storage="_Favorites", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserFeedbacks(UserFeedback entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserFeedbacks(UserFeedback entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ProgressHistories(ProgressHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProgressHistories(ProgressHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Progresses(Progress entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Progresses(Progress entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Lessons(Lesson entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserFeedback")]
	public partial class UserFeedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FeedbackID;
		
		private int _UserID;
		
		private string _FeedbackText;
		
		private System.DateTime _SubmissionDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedbackIDChanging(int value);
    partial void OnFeedbackIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFeedbackTextChanging(string value);
    partial void OnFeedbackTextChanged();
    partial void OnSubmissionDateChanging(System.DateTime value);
    partial void OnSubmissionDateChanged();
    #endregion
		
		public UserFeedback()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FeedbackID
		{
			get
			{
				return this._FeedbackID;
			}
			set
			{
				if ((this._FeedbackID != value))
				{
					this.OnFeedbackIDChanging(value);
					this.SendPropertyChanging();
					this._FeedbackID = value;
					this.SendPropertyChanged("FeedbackID");
					this.OnFeedbackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FeedbackText
		{
			get
			{
				return this._FeedbackText;
			}
			set
			{
				if ((this._FeedbackText != value))
				{
					this.OnFeedbackTextChanging(value);
					this.SendPropertyChanging();
					this._FeedbackText = value;
					this.SendPropertyChanged("FeedbackText");
					this.OnFeedbackTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmissionDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmissionDate
		{
			get
			{
				return this._SubmissionDate;
			}
			set
			{
				if ((this._SubmissionDate != value))
				{
					this.OnSubmissionDateChanging(value);
					this.SendPropertyChanging();
					this._SubmissionDate = value;
					this.SendPropertyChanged("SubmissionDate");
					this.OnSubmissionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserFeedback", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserFeedbacks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserFeedbacks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuizQuestions")]
	public partial class QuizQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionID;
		
		private int _LessonID;
		
		private string _QuestionText;
		
		private EntitySet<QuizAnswer> _QuizAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    #endregion
		
		public QuizQuestion()
		{
			this._QuizAnswers = new EntitySet<QuizAnswer>(new Action<QuizAnswer>(this.attach_QuizAnswers), new Action<QuizAnswer>(this.detach_QuizAnswers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL")]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuizQuestion_QuizAnswer", Storage="_QuizAnswers", ThisKey="QuestionID", OtherKey="QuestionID")]
		public EntitySet<QuizAnswer> QuizAnswers
		{
			get
			{
				return this._QuizAnswers;
			}
			set
			{
				this._QuizAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuizAnswers(QuizAnswer entity)
		{
			this.SendPropertyChanging();
			entity.QuizQuestion = this;
		}
		
		private void detach_QuizAnswers(QuizAnswer entity)
		{
			this.SendPropertyChanging();
			entity.QuizQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuizAnswers")]
	public partial class QuizAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerID;
		
		private int _QuestionID;
		
		private string _AnswerText;
		
		private bool _IsCorrect;
		
		private EntityRef<QuizQuestion> _QuizQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIDChanging(int value);
    partial void OnAnswerIDChanged();
    partial void OnQuestionIDChanging(int value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerTextChanging(string value);
    partial void OnAnswerTextChanged();
    partial void OnIsCorrectChanging(bool value);
    partial void OnIsCorrectChanged();
    #endregion
		
		public QuizAnswer()
		{
			this._QuizQuestion = default(EntityRef<QuizQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AnswerID
		{
			get
			{
				return this._AnswerID;
			}
			set
			{
				if ((this._AnswerID != value))
				{
					this.OnAnswerIDChanging(value);
					this.SendPropertyChanging();
					this._AnswerID = value;
					this.SendPropertyChanged("AnswerID");
					this.OnAnswerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int NOT NULL")]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._QuizQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnswerText", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AnswerText
		{
			get
			{
				return this._AnswerText;
			}
			set
			{
				if ((this._AnswerText != value))
				{
					this.OnAnswerTextChanging(value);
					this.SendPropertyChanging();
					this._AnswerText = value;
					this.SendPropertyChanged("AnswerText");
					this.OnAnswerTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorrect", DbType="Bit NOT NULL")]
		public bool IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuizQuestion_QuizAnswer", Storage="_QuizQuestion", ThisKey="QuestionID", OtherKey="QuestionID", IsForeignKey=true)]
		public QuizQuestion QuizQuestion
		{
			get
			{
				return this._QuizQuestion.Entity;
			}
			set
			{
				QuizQuestion previousValue = this._QuizQuestion.Entity;
				if (((previousValue != value) 
							|| (this._QuizQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuizQuestion.Entity = null;
						previousValue.QuizAnswers.Remove(this);
					}
					this._QuizQuestion.Entity = value;
					if ((value != null))
					{
						value.QuizAnswers.Add(this);
						this._QuestionID = value.QuestionID;
					}
					else
					{
						this._QuestionID = default(int);
					}
					this.SendPropertyChanged("QuizQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgressHistory")]
	public partial class ProgressHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HistoryID;
		
		private int _UserID;
		
		private int _LessonID;
		
		private System.DateTime _CompletionDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<Lesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHistoryIDChanging(int value);
    partial void OnHistoryIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnCompletionDateChanging(System.DateTime value);
    partial void OnCompletionDateChanged();
    #endregion
		
		public ProgressHistory()
		{
			this._User = default(EntityRef<User>);
			this._Lesson = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HistoryID
		{
			get
			{
				return this._HistoryID;
			}
			set
			{
				if ((this._HistoryID != value))
				{
					this.OnHistoryIDChanging(value);
					this.SendPropertyChanging();
					this._HistoryID = value;
					this.SendPropertyChanged("HistoryID");
					this.OnHistoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL")]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="DateTime NOT NULL")]
		public System.DateTime CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProgressHistory", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProgressHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProgressHistories.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_ProgressHistory", Storage="_Lesson", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.ProgressHistories.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.ProgressHistories.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Progress")]
	public partial class Progress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgressID;
		
		private int _UserID;
		
		private int _LessonID;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<Lesson> _Lesson;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgressIDChanging(int value);
    partial void OnProgressIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    #endregion
		
		public Progress()
		{
			this._User = default(EntityRef<User>);
			this._Lesson = default(EntityRef<Lesson>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgressID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgressID
		{
			get
			{
				return this._ProgressID;
			}
			set
			{
				if ((this._ProgressID != value))
				{
					this.OnProgressIDChanging(value);
					this.SendPropertyChanging();
					this._ProgressID = value;
					this.SendPropertyChanged("ProgressID");
					this.OnProgressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL")]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Progress", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Progresses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Progresses.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Progress", Storage="_Lesson", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Progresses.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Progresses.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lessons")]
	public partial class Lesson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LessonID;
		
		private string _LessonTitle;
		
		private string _LessonContent;
		
		private int _CreatorUserID;
		
		private EntitySet<ProgressHistory> _ProgressHistories;
		
		private EntitySet<Progress> _Progresses;
		
		private EntitySet<Favorite> _Favorites;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    partial void OnLessonTitleChanging(string value);
    partial void OnLessonTitleChanged();
    partial void OnLessonContentChanging(string value);
    partial void OnLessonContentChanged();
    partial void OnCreatorUserIDChanging(int value);
    partial void OnCreatorUserIDChanged();
    #endregion
		
		public Lesson()
		{
			this._ProgressHistories = new EntitySet<ProgressHistory>(new Action<ProgressHistory>(this.attach_ProgressHistories), new Action<ProgressHistory>(this.detach_ProgressHistories));
			this._Progresses = new EntitySet<Progress>(new Action<Progress>(this.attach_Progresses), new Action<Progress>(this.detach_Progresses));
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LessonTitle
		{
			get
			{
				return this._LessonTitle;
			}
			set
			{
				if ((this._LessonTitle != value))
				{
					this.OnLessonTitleChanging(value);
					this.SendPropertyChanging();
					this._LessonTitle = value;
					this.SendPropertyChanged("LessonTitle");
					this.OnLessonTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LessonContent
		{
			get
			{
				return this._LessonContent;
			}
			set
			{
				if ((this._LessonContent != value))
				{
					this.OnLessonContentChanging(value);
					this.SendPropertyChanging();
					this._LessonContent = value;
					this.SendPropertyChanged("LessonContent");
					this.OnLessonContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int NOT NULL")]
		public int CreatorUserID
		{
			get
			{
				return this._CreatorUserID;
			}
			set
			{
				if ((this._CreatorUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorUserIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUserID = value;
					this.SendPropertyChanged("CreatorUserID");
					this.OnCreatorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_ProgressHistory", Storage="_ProgressHistories", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<ProgressHistory> ProgressHistories
		{
			get
			{
				return this._ProgressHistories;
			}
			set
			{
				this._ProgressHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Progress", Storage="_Progresses", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<Progress> Progresses
		{
			get
			{
				return this._Progresses;
			}
			set
			{
				this._Progresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Favorite", Storage="_Favorites", ThisKey="LessonID", OtherKey="LessonID")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Lesson", Storage="_User", ThisKey="CreatorUserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Lessons.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Lessons.Add(this);
						this._CreatorUserID = value.UserID;
					}
					else
					{
						this._CreatorUserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgressHistories(ProgressHistory entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_ProgressHistories(ProgressHistory entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_Progresses(Progress entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Progresses(Progress entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = this;
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Lesson = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Favorites")]
	public partial class Favorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FavoriteID;
		
		private int _UserID;
		
		private int _LessonID;
		
		private EntityRef<Lesson> _Lesson;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavoriteIDChanging(int value);
    partial void OnFavoriteIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLessonIDChanging(int value);
    partial void OnLessonIDChanged();
    #endregion
		
		public Favorite()
		{
			this._Lesson = default(EntityRef<Lesson>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavoriteID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FavoriteID
		{
			get
			{
				return this._FavoriteID;
			}
			set
			{
				if ((this._FavoriteID != value))
				{
					this.OnFavoriteIDChanging(value);
					this.SendPropertyChanging();
					this._FavoriteID = value;
					this.SendPropertyChanged("FavoriteID");
					this.OnFavoriteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonID", DbType="Int NOT NULL")]
		public int LessonID
		{
			get
			{
				return this._LessonID;
			}
			set
			{
				if ((this._LessonID != value))
				{
					if (this._Lesson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonIDChanging(value);
					this.SendPropertyChanging();
					this._LessonID = value;
					this.SendPropertyChanged("LessonID");
					this.OnLessonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lesson_Favorite", Storage="_Lesson", ThisKey="LessonID", OtherKey="LessonID", IsForeignKey=true)]
		public Lesson Lesson
		{
			get
			{
				return this._Lesson.Entity;
			}
			set
			{
				Lesson previousValue = this._Lesson.Entity;
				if (((previousValue != value) 
							|| (this._Lesson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lesson.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._Lesson.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._LessonID = value.LessonID;
					}
					else
					{
						this._LessonID = default(int);
					}
					this.SendPropertyChanged("Lesson");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favorite", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
